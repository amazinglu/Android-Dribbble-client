shot list

1. layout (fragment and recycler view)

use Frame layout as a container of fragment

fragment itself is a recycler view

List_item_shot is the content of the recycler view
    让每一个卡片有阴影 => use the Card view wrap the whole layout
    让View, like and count 靠右 => 用relative layout
    让Text View 有图标 => use drawable left and drawable padding

set the padding of every element in the recycler view
    use RecyclerView.ItemDecoration
        over ride function "getItemOffsets"
        set the "outRect"

Fragment
    initialize the fragment in main activity
    use "onCreateView" to inflate the fragment layout (fragment_recycler_view)
    use "onViewCreated" to set the content or data of each view

Butter Knife
    in activity, we use "ButterKnife.bind(this)"
    in fragment and view holder, we use "ButterKnife.bind(this, itemView)"

===================================================================================

add navigation drawer

add compile 'com.android.support:design:26.+' in gradle file

the layout file
    in activity_main.xml, use Drawer layout to wrap the frame layout
    and the NavigationView is the content of the drawer

    the content of drawer contains two parts: menus and header

backend handle
    use "navigationView.setNavigationItemSelectedListener" to set menus里面的每一个item的点击事件
        create a new fragment for the container
        set a new title of the application

    close the drawer after click

    replace the new fragment

    implement the sandwich button
        use "ActionBarDrawerToggle" as the listener of open and close drawer
        use "onPostCreate", "onConfigurationChanged" and "onOptionsItemSelected"
        来激活点击事件和更新状态的改变


=======================================

add tool bar

1. use the tool bar to replace the action bar
    - in styles.xml, set <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
        => disable the action bar
    - add the tool bar to activity_main.xml
    - in onCreate function, set the tool bar to be action bar
        => setSupportActionBar(toolbar);

2. make the status bar 透明
    - add <item name="android:windowTranslucentStatus">true</item> to styles.xml
        => this feature can only be used above API 19
        => so we create a styles.xml in the directory of values-v19

    - add android:minHeight="?attr/actionBarSize"
          android:fitsSystemWindows="true"         to toolbar view
          => tool bar then will adjust its position base on status bar's height

3. for more details, look at "use tool bar.txt"

* the onCreateViewHolder(create the view holder) and onBindViewHolder(bind the data) qill be call by
    the "getView" function in the recycler view
* we need to define the getViewType(int position) function to tell the "getView" function how to
    define the view type
* the getItemCount() function tells the "getView" function the number of positions

===============================================

infinite loading list

implement the loading progressive bar

    layout of progressive bar

    mix type adapter again
    when the position is < data.size() => load the shot (list_item_shot layout)
    when the position is == data.size() => load the progressive bar (list_item_loading layout)

load the date in the background thread

    when viewType == VIEW_TYPE_LOADING, the adapter need to actually the data somewhere
    => use onLoadMore() method to load more data

    when we create the adapter in fragment, we define the onLoadMore method

        - load more data and pass the data to adapter (append method)
        - see if we still need the next load
            => in the current demo we assumes that there are 50 shot lists and each page has 20 lists

=================================================

use picasso to download image and place it into image view

Picasso.with(holder.itemView.getContext())
                        .load(shot.getImageUrl())   // load the image from url
                        .placeholder(R.drawable.shot_placeholder)    // if no image load, use placeholder
                        .into(((ImageViewHolder) holder).image);    // out the iamge into image view

use glide to download image and place it into image view
    - same as picasso

use fresco to download image and place it into image view
    - need to initialize Fresco
        - can only be initialize once
        - create a name for the application
        - create a class that have the same name of the application
        - initialize Frecso in the onCreate function of this class

    - fresco use SimpleDraweeView
        - change all the IamgeView to impleDraweeView

    - add fresco to the adapter (same as Gilde and Picasso)

========================================================

oauth login:

1. create the layout for login and auth activity
    => login (activity_login.xml)
    => auth (activity_webview.xml)
        the position of the progressive bar and webview

2. in login activity
    - get the user info and token in share memory
        - if not token: stay in login activity
        - else: jump to main activity (user has already login)

3. if not log in, click the log in button and call AuthFunc.openAuthActivity(LoginActivity.this)
    - generate the authorize url (get request)
    - go to .login.auth.AuthActivity

4. use webview to load url, set the preogressive bar and 检测 url change

    - set the progressive bar 
        - webView.setWebViewClient.onPageStarted()
        - webView.setWebViewClient.onPageFinished()
        - webView.setWebChromeClient.onProgressChanged() // update the prpgressive bar

    - load url
        - webView.loadUrl(url);

    - notify url change ( webView.setWebViewClient.shouldOverrideUrlLoading(...))
        - get the code from redirected url
        - go back to login activity with the code

    - use the code to get the token => AuthFunc.fetchAccessToken(authCode)
    - now we have the token
        - use the token to get user info
        - store the token and user info into share preference (DribbbleFunc.login)
        - go to main activity

================================================

load shots using get request (ShotListFragment)

use AsyncTask: (LoadShotTask class)
    - doInBackground(...) // non_UI thread, for HTTP IO
        - generate the request url
        - translate the JSON reponse to object (shot) DribbbleFunc.getShots(....)

    - onPostExecute(...) // add data to adapter, UI thread
        - add shots to adapter and update the view => adapter.append(shots)

============================================

share shots to other activities (ShotAdapter.share(...))

==========================================

下拉 refresh

1. use SwipeRefreshLayout to wrap recycler view

2. set the reflesh listener
    - swipeRefreshLayout.setOnRefreshListener.onRefresh()
    - we need to 
        - delete all the existing data
        - load the new data using get request
        - place the new data onto adapter and update the view
    - add a "refresh mode" on LoadShotTask class

3. remember to disable the refresh when the view first create

============================================

recycler view for like fragment

* the layout of "like" and "home" is the same style
* adapter is the same
* the data download from Dribbble API is different

1. in main activity when we click the button in the menus of drawer
    - go to the fragment will the type of fragment ("home" or like)

2. in ShotListFragment, download the data of the given type ("home" => getShots(...), "like" => getLikedShot(...))

3. remember to set the showLoading

============================================

like or dislike a shot

* according to the API of Dribbble:
    - like a shot => post request (likeShot(...))
    - unlike a shot => delete request (unlikedShot(...))
    - need to check if a shot is "like" by the user (isLikingShot(...))

1. before we click the like button, check if the user "like" the shot
    - AsyncTaskCompat.executeParallel(new CheckLikeTask()) in ShotFragment
    - set the like attribute of shot

2. set the view of like button

3. set the listener of the like button
    - use API to update the like status of the shot (LikeTask)

** the shot instance in adapter is the reference of the shot instance in fragment
    therefore, if we change the property in shot instance in fragment and notify the adapter
    adapter know the change of the shot instance

==============================================

bucket section 

1. bucket not choosing mode
    


















