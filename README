shot list

1. layout (fragment and recycler view)

use Frame layout as a container of fragment

fragment itself is a recycler view

List_item_shot is the content of the recycler view
    让每一个卡片有阴影 => use the Card view wrap the whole layout
    让View, like and count 靠右 => 用relative layout
    让Text View 有图标 => use drawable left and drawable padding

set the padding of every element in the recycler view
    use RecyclerView.ItemDecoration
        over ride function "getItemOffsets"
        set the "outRect"

Fragment
    initialize the fragment in main activity
    use "onCreateView" to inflate the fragment layout (fragment_recycler_view)
    use "onViewCreated" to set the content or data of each view

Butter Knife
    in activity, we use "ButterKnife.bind(this)"
    in fragment and view holder, we use "ButterKnife.bind(this, itemView)"

===================================================================================

add navigation drawer

add compile 'com.android.support:design:26.+' in gradle file

the layout file
    in activity_main.xml, use Drawer layout to wrap the frame layout
    and the NavigationView is the content of the drawer

    the content of drawer contains two parts: menus and header

backend handle
    use "navigationView.setNavigationItemSelectedListener" to set menus里面的每一个item的点击事件
        create a new fragment for the container
        set a new title of the application

    close the drawer after click

    replace the new fragment

    implement the sandwich button
        use "ActionBarDrawerToggle" as the listener of open and close drawer
        use "onPostCreate", "onConfigurationChanged" and "onOptionsItemSelected"
        来激活点击事件和更新状态的改变


=======================================

add tool bar

1. use the tool bar to replace the action bar
    - in styles.xml, set <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
        => disable the action bar
    - add the tool bar to activity_main.xml
    - in onCreate function, set the tool bar to be action bar
        => setSupportActionBar(toolbar);

2. make the status bar 透明
    - add <item name="android:windowTranslucentStatus">true</item> to styles.xml
        => this feature can only be used above API 19
        => so we create a styles.xml in the directory of values-v19

    - add android:minHeight="?attr/actionBarSize"
          android:fitsSystemWindows="true"         to toolbar view
          => tool bar then will adjust its position base on status bar's height

3. for more details, look at "use tool bar.txt"

* the onCreateViewHolder(create the view holder) and onBindViewHolder(bind the data) qill be call by
    the "getView" function in the recycler view
* we need to define the getViewType(int position) function to tell the "getView" function how to
    define the view type
* the getItemCount() function tells the "getView" function the number of positions

===============================================

infinite loading list

implement the loading progressive bar

    layout of progressive bar

    mix type adapter again
    when the position is < data.size() => load the shot (list_item_shot layout)
    when the position is == data.size() => load the progressive bar (list_item_loading layout)

load the date in the background thread

    when viewType == VIEW_TYPE_LOADING, the adapter need to actually the data somewhere
    => use onLoadMore() method to load more data

    when we create the adapter in fragment, we define the onLoadMore method

        - load more data and pass the data to adapter (append method)
        - see if we still need the next load
            => in the current demo we assumes that there are 50 shot lists and each page has 20 lists

=================================================

use picasso to download image and place it into image view

Picasso.with(holder.itemView.getContext())
                        .load(shot.getImageUrl())   // load the image from url
                        .placeholder(R.drawable.shot_placeholder)    // if no image load, use palceholder
                        .into(((ImageViewHolder) holder).image);    // out the iamge into image view